// <auto-generated />
using System;
using FSH.WebApi.Infrastructure.Multitenancy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrators.PostgreSQL.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20230720150601_forced_separate_dbs")]
    partial class forced_separate_dbs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FSH.WebApi.Infrastructure.Multitenancy.FSHTenantInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUpto")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("Tenants", "MultiTenancy");
                });

            modelBuilder.Entity("FSH.WebApi.Infrastructure.Multitenancy.FSHTenantInfo", b =>
                {
                    b.OwnsOne("FSH.WebApi.Application.Common.PushNotifications.PushNotificationsSettings", "PushNotificationsSettings", b1 =>
                        {
                            b1.Property<string>("FSHTenantInfoId")
                                .HasColumnType("character varying(64)");

                            b1.Property<string>("AppId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AuthKey")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("IconUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Provider")
                                .HasColumnType("integer");

                            b1.HasKey("FSHTenantInfoId");

                            b1.ToTable("Tenants", "MultiTenancy");

                            b1.WithOwner()
                                .HasForeignKey("FSHTenantInfoId");
                        });

                    b.OwnsOne("FSH.WebApi.Application.Common.Sms.SmsSettings", "SmsSettings", b1 =>
                        {
                            b1.Property<string>("FSHTenantInfoId")
                                .HasColumnType("character varying(64)");

                            b1.Property<string>("Header")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("ProviderType")
                                .HasColumnType("integer");

                            b1.Property<string>("Usercode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FSHTenantInfoId");

                            b1.ToTable("Tenants", "MultiTenancy");

                            b1.WithOwner()
                                .HasForeignKey("FSHTenantInfoId");
                        });

                    b.Navigation("PushNotificationsSettings");

                    b.Navigation("SmsSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
